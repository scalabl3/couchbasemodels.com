<% content_for :title, "Product Catalog Model in Couchbase" %>
<% content_for :keywords, "product, catalog, product catalog, model, sky, categories, comments, ratings, sample, example, couchbase" %>
<% content_for :description, "Example Product Catalog model in Couchbase" %>
<ul class="breadcrumb">
  <li>
    <a href="/">Home</a> <span class="divider">/</span>
  </li>
  <li>
    <a href="/models">Models</a> <span class="divider">/</span>
  </li>
  <li class="active">Product Catalog</li>
</ul>

<br />
<div class="page-header">
  <h1>Product Catalog Model
		<small>Create a Product Catalog through Documents</small>
	</h1>
	<br />
	<p class="lead w80">This model is a sample of how to create a a product catalog using Couchbase and documents, with product sku's, categories, comments, and ratings.</p>
</div>

<h1>Still Being Written Up</h1>

<h2>Product Class</h2>
Create a basic Product class that inherits from a Base model
<pre class="prettyprint linenums lang-rb">
class Product < ModelBase
  attr_accessor :sku, :name, :price, :description, :related_skus
  
  def initialize (attr = {})  
  end
  
  def quantity
    c = Couchbase.bucket
    doc = c.get("#{@sku.downcase}::quantity")
    return 0 unless doc
    doc
  end 
  
  def in_stock?
    return self.quantity > 0
  end
  
  def create_doc_keys
  
  end
  
  def create_default_docs
  
  end
  
  def create
  
  end
  
  def load_persisted
  
  end
  
end
</pre>

<h2>Products By Category (Small Volume)</h2>
<pre class="prettyprint linenums lang-rb">
  
</pre>


<h2>Products By Category (Larger Volume)</h2>
Use a View to create a secondary index based on categories >> products
<pre class="prettyprint linenums lang-js">
function(doc, meta) {
  if (doc.type === "product") {
    emit(doc.category, [meta.id, doc.name])
  }
}
</pre>



<br /><br />
<%= render :partial => "/layouts/comments" %>